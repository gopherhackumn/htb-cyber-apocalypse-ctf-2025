import binascii

msb_output
lsb_output
             ::-1]
i = 100
n = 84978369042455571089679930308597178811236624254563066058288611966008096124218219952076971220798978682877303869696449438721290478547475645968097711109962413641029045228345415642815750317320134327925145300370274356285381414031145256138717451986522016087604611330256532528187051473836697439864616356122848732889

# https://crypto.stackexchange.com/questions/11053/rsa-least-significant-bit-oracle-attack
res = 0
for char in msb_output:
    # check if plaintext < n / 2^i
    if char == "1":
        res += n >> i
    i += 1
print(binascii.unhexlify(hex(res)[2:]))

# p LSB even vs p LSB odd
# Either
# - p/2 LSB even vs p/2 LSB odd or
# - (p + N)/2 LSB even vs (p + N)/2 LSB odd

# Some math:
# (p + N)/2 LSB even ==> p + N = ...00 ==> p = ...00 - N[-2:] ?
# (p + N)/2 LSB odd  ==> p + N = ...10 ==> p = ...10 - N[-2:] ?

# In general, either
# - last even vs last odd, last := (p + x*N) / 2^i
# p = (last & 1) * 2^i - x*N

res = 0
last = 0
x = 0
for i, char in enumerate(lsb_output[1:]):
    res = ((int(char) << i) - x * n) & ((1 << (i + 1)) - 1)
    if char == "1":
        # > n/2, odd
        x += 1 << i
    # print(hex(res))
print(binascii.unhexlify("0" + hex(res)[2:]))

# Flag: HTB{1_l0v3_us1ng_RS4_0r4cl3s___3v3n_4_s1ngl3_b1t_1s_3n0ugh_t0_g3t_m3_t0_3ld0r14!_32a1ae8b3d736cb9afde31c10ed0ac50}
